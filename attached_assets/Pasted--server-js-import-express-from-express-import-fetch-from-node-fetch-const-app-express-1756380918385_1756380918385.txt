// server.js
import express from "express";
import fetch from "node-fetch";

const app = express();
app.use(express.json());

// ---------- Cin7 Core client ----------
const CORE_BASE_URL = process.env.CORE_BASE_URL || "https://inventory.dearsystems.com/ExternalApi";
const CORE_HEADERS = () => ({
  "Content-Type": "application/json",
  "api-auth-accountid": process.env.CORE_ACCOUNT_ID,
  "api-auth-applicationkey": process.env.CORE_API_KEY,
});

/**
 * Helper to call Cin7 Core endpoints with simple error handling + pagination support.
 */
async function coreGet(path, { page = 1, limit, qs = {} } = {}) {
  const url = new URL(`${CORE_BASE_URL}${path}`);
  if (page) url.searchParams.set("page", String(page));
  if (limit) url.searchParams.set("limit", String(limit));
  for (const [k, v] of Object.entries(qs)) if (v !== undefined && v !== null) url.searchParams.set(k, String(v));

  const res = await fetch(url, { headers: CORE_HEADERS() });
  if (!res.ok) {
    const text = await res.text();
    throw new Error(`Core GET ${url} failed (${res.status}): ${text}`);
  }
  return res.json();
}

async function corePost(path, body) {
  const url = `${CORE_BASE_URL}${path}`;
  const res = await fetch(url, { method: "POST", headers: CORE_HEADERS(), body: JSON.stringify(body) });
  if (!res.ok) {
    const text = await res.text();
    throw new Error(`Core POST ${url} failed (${res.status}): ${text}`);
  }
  return res.json();
}

// ---------- API routes you can call from your React frontend ----------

// 1) Customers (paged)
app.get("/api/core/customers", async (req, res) => {
  try {
    const page = Number(req.query.page || 1);
    const limit = Number(req.query.limit || 100);
    const data = await coreGet("/Customers", { page, limit });
    // Cin7 Core returns shape { Customers: [...], Total: N }
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: String(e.message || e) });
  }
});

// 2) Locations (warehouses)
app.get("/api/core/locations", async (req, res) => {
  try {
    const data = await coreGet("/Locations", { page: 1, limit: 500 });
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: String(e.message || e) });
  }
});

// 3) Product Availability
//    Supports ?page=&limit=&sku=&name=&location= (location is the Location "name" in Core)
app.get("/api/core/availability", async (req, res) => {
  try {
    const page = Number(req.query.page || 1);
    const limit = Number(req.query.limit || 100);
    const { sku, name, location } = req.query;

    const data = await coreGet("/ProductAvailability", {
      page,
      limit,
      qs: {
        ...(sku ? { sku } : {}),
        ...(name ? { name } : {}),
        ...(location ? { location } : {}),
      },
    });

    // Note: endpoint only returns rows where qty is non-zero by default. :contentReference[oaicite:2]{index=2}
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: String(e.message || e) });
  }
});

// 4) Create Quote (push to Core as a NOTAUTHORISED order)
//    Expected body:
//    {
//      "customerId": "GUID | optional",
//      "customerName": "string if no customerId",
//      "contact": "optional",
//      "email": "optional",
//      "priceTier": "optional",
//      "location": "optional warehouse name",
//      "lines": [
//        { "sku": "ABC123", "quantity": 2, "price": 199.0, "taxRule": "Standard", "lineOrder": 1 }
//      ],
//      "orderMemo": "optional note/PO ref"
//    }
app.post("/api/core/sale/quote", async (req, res) => {
  try {
    const { customerId, customerName, contact, email, priceTier, location, lines = [], orderMemo } = req.body;

    if (!customerId && !customerName) {
      return res.status(400).json({ error: "Provide customerId or customerName" });
    }
    if (!Array.isArray(lines) || lines.length === 0) {
      return res.status(400).json({ error: "Provide at least one line" });
    }

    // Build Sale payload per Cin7 Core Sale POST schema.
    // Quote = OrderStatus: NOTAUTHORISED; InvoiceStatus: NOTAUTHORISED. :contentReference[oaicite:3]{index=3}
    const payload = {
      CustomerID: customerId || undefined,
      Customer: customerName || undefined,
      Contact: contact || undefined,
      Email: email || undefined,

      PriceTier: priceTier || undefined,
      Location: location || undefined, // warehouse to reserve/pick from if you later authorise

      OrderStatus: "NOTAUTHORISED",
      InvoiceStatus: "NOTAUTHORISED",
      OrderMemo: orderMemo || undefined,

      Lines: lines.map((l, idx) => ({
        SKU: l.sku,
        Quantity: Number(l.quantity),
        Price: Number(l.price),
        Tax: 0,                          // Core requires fields present; backend recalculates on authorisation
        Total: 0,                        // set 0; server computes on authorisation
        TaxRule: l.taxRule || "Standard",
        LineOrder: l.lineOrder || idx + 1,
      })),
    };

    const result = await corePost("/Sale", payload);
    res.json(result);
  } catch (e) {
    res.status(500).json({ error: String(e.message || e) });
  }
});

app.get("/healthz", (_req, res) => res.json({ ok: true }));

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`B2B â†” Core bridge running on :${port}`));
